<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on English</title><link>https://awslabs.github.io/aws-solutions-assembler/en/getting-started/</link><description>Recent content in Getting Started on English</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Everything is mine</copyright><lastBuildDate>Mon, 27 Jul 2020 13:06:03 +0800</lastBuildDate><atom:link href="https://awslabs.github.io/aws-solutions-assembler/en/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Installation</title><link>https://awslabs.github.io/aws-solutions-assembler/en/getting-started/installation/</link><pubDate>Mon, 27 Jul 2020 13:46:14 +0800</pubDate><guid>https://awslabs.github.io/aws-solutions-assembler/en/getting-started/installation/</guid><description>Prerequisites Install Docker Desktop Install AWS CDK AWS Configuration and Credential Setup Config aws cli credential Make sure aws cli is well configured by running the following command to check
$ aws configure list Name Value Type Location ---- ----- ---- -------- profile &amp;lt;not set&amp;gt; None None access_key ****************XAWA shared-credentials-file secret_key ****************qEK5 shared-credentials-file region us-east-2 config-file ~/.aws/config Excute aws cdk bootstrap for your first time Run cdk bootstrap aws://&amp;lt;your aws account&amp;gt;/&amp;lt;aws region&amp;gt; to bootstrap cdkï¼š</description></item><item><title>Build Your Own Tile</title><link>https://awslabs.github.io/aws-solutions-assembler/en/getting-started/build-your-own-tile/</link><pubDate>Mon, 27 Jul 2020 14:13:55 +0800</pubDate><guid>https://awslabs.github.io/aws-solutions-assembler/en/getting-started/build-your-own-tile/</guid><description>During our usage of microservices&amp;rsquo; tile(building block). You may already find that, we need two steps (define a deployment and run a deployment) to deploy VPC, IAM, EKS sort of things with best practices on AWS cloud. We totally need around 10 steps to finish deploying 2048 games on EKS.
What if we want to deploy Nginx instead?
Now, let&amp;rsquo;s create a new tile to deploy a Nginx server on top of the EKS in the previous chapter.</description></item><item><title>Usage of Hu</title><link>https://awslabs.github.io/aws-solutions-assembler/en/getting-started/usage-of-hu/</link><pubDate>Mon, 27 Jul 2020 14:22:19 +0800</pubDate><guid>https://awslabs.github.io/aws-solutions-assembler/en/getting-started/usage-of-hu/</guid><description>By using Mahjong, we can combine with multiple tiles to build up a solution infrastructure on cloud. We call it as &amp;ldquo;Hu&amp;rdquo;. We could use a tile developed by our own and combined with existing tiles from community for our own purpose. It gives you not only flexibility but also best practices on cloud.
Thinking of your microservices combination Know existing resources in community &amp;ldquo;Hu&amp;rdquo; Belows are existing tiles in the community</description></item><item><title>Simple Usage</title><link>https://awslabs.github.io/aws-solutions-assembler/en/getting-started/simple-usage/</link><pubDate>Mon, 27 Jul 2020 13:56:43 +0800</pubDate><guid>https://awslabs.github.io/aws-solutions-assembler/en/getting-started/simple-usage/</guid><description>As you know, many of contributors have built best practices into Mahjong&amp;rsquo;s building blocks. We called it &amp;ldquo;tile&amp;rdquo;
In this case, we&amp;rsquo;re going to deploy a AWS EKS cluster
You only need to define your cluster name, nodes number, instance types and k8s version. Mahjong will help you to build cluster with minimal permission, cross AZ environment
Define and build service component Know how to use Mahjong Mahjong use Yaml to control deployment and tiles definition, including:</description></item></channel></rss>