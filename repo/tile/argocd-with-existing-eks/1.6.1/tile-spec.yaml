apiVersion: mahjong.io/v1alpha1
kind: Tile
metadata:
    name: Argocd-With-Existing-EKS
    category: ContainerApplication
    version: 1.6.1
    # Dependent on what kind of vendor service, to determine what input parameters are required. 
    # For example, dependentOnVendorService: EKS, that's required 'clusterName', 'masterRoleARN'
    dependentOnVendorService: EKS
# Specification
spec:
  preRun:
    stages:
      - name: InstallArgoCD
        command: |
          cd $TILE_HOME
          kubectl create ns argocd || true
          kubectl apply -f lib/argocd.yaml -n argocd
      - name: CheckArgocd
        command: |
          kubectl get deployments -n argocd
        readinessProbe:
          command: |
            count=`kubectl get deployment/argocd-server -n argocd -o json |jq '.status.readyReplicas'`
            if [ $count -ne 1 ]
            then
              echo "ReadyReplicas of ArgoCD isn't equal to 1."
              exit 1
            fi
            echo "ReadyReplicas of ArgoCD is $count and ready to go."
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 300
          successThreshold: 1
          failureThreshold: -1           
      - name: RetsetSecret
        command: |
          # argocd-server-cf87b5c86-5xlv2=$2a$10$lv90EJg9bW88XqUjjkhpWekVoRZVVgtLULKuiui/eUmAnR/rlL/ui
          kubectl -n argocd patch secret argocd-secret \
            -p '{"stringData": {
              "admin.password": "$2a$10$lv90EJg9bW88XqUjjkhpWekVoRZVVgtLULKuiui/eUmAnR/rlL/ui",
              "admin.passwordMtime": "'$(date +%FT%T%Z)'"
            }}'
      - name: InstallRollouts
        command: |
          cd $TILE_HOME
          kubectl create namespace argo-rollouts || true
          kubectl apply -f lib/rollouts.yaml -n argo-rollouts
          
  inputs:
    # String
    - name: clusterName
      inputType: String
      require: true
    # String
    - name: masterRoleARN
      inputType: String
      require: true
    # String
    - name: namespace
      inputType: String
      require: false
      defaultValue: argocd


  # Ouptputs represnt output value after launched, for 'ContainerApplication' might need leverage specific command to retrive output.
  outputs:
    # String
    - name: user
      outputType: String
      defaultValue: admin
      description: Custom::User
    # FromCommand
    - name: password
      outputType: String
      defaultValue: argocd-server-cf87b5c86-5xlv2
      description: Custom::Password        
    - name: argocdServer
      outputType: FromCommand
      defaultValueCommand: kubectl get svc argocd-server -n argocd -o json  |jq -r '.status.loadBalancer.ingress[].hostname'
      description: Custom::String        
    - name: argocdBaseUrl
      outputType: String
      defaultValue: https://$(self.outputs.argocdServer)/argocd
      description: Custom::String        

  notes: []

