apiVersion: mahjong.io/v1alpha1
kind: Tile
metadata:
    name: Go-Bumblebee-Jazz
    category: Application
    version: 0.7.1
    
spec:
  global:
    env:
      - name: GITHUB_USER
        value: $(self.inputs.githubUser)
      - name: GITHUB_ACCESS_TOKEN
        value: $(self.inputs.githubAccessToken)
      - name: APP_REPO
        value: $(self.inputs.appRepo)
      - name: APP_BRANCH
        value: $(self.inputs.appBranch)
      - name: APP_CONF_REPO
        value: $(self.inputs.appConfRepo)
      - name: KMS_KEY_ID
        value: $(self.inputs.kmsKeyID)

  preRun:
    stages:
      - name: PrepareAppContent
        command: |
          cd $TILE_HOME
          rm -rf $APP_REPO;git clone https://github.com/$GITHUB_USER/$APP_REPO.git
          cd $APP_REPO
          git checkout $APP_BRANCH
          git pull
          prod_redis_endpoint=$(self.inputs.prodRedisEndpoint)
          if [ $prod_redis_endpoint != "" ]
          then 
            cd manifests/kustomize/production/air
            sed -i -e 's/redis-cart:6379/'$prod_redis_endpoint'/g' air-deployment.yaml
          fi
      - name: SyncAppContentToRepository
        command: |
          cd $TILE_HOME
          rm -rf APP_CONF_REPO;git clone https://$GITHUB_ACCESS_TOKEN:x-oauth-basic@github.com/$GITHUB_USER/$APP_CONF_REPO.git
          cd $APP_CONF_REPO
          cp -r ../$APP_REPO/manifests/* .
          git add -A
          git commit -m "first commit"
          # !!!Dice has setup already!!!
          # git config --global user.email "robot@codebuild.aws"
          # git config --global user.name "robot"
          # 
          git push
      - name: CreateSecrets
        command: |
          cd $TILE_HOME/scripts
          ./create-secrets.sh github-bumblebee $GITHUB_USER $GITHUB_ACCESS_TOKEN $APP_CONF_REPO $KMS_KEY_ID
      - name: Register2Codebuild
        command: |
          cd $TILE_HOME/scripts
          ./import-source-credential.sh
          ./create-iam-role.sh
          ./register-to-codebuild.sh
      - name: PrepareKubeConfig
        command: |
          cd $TILE_HOME
          export AWS_REGION=`aws configure get region`
          export KUBECONFIG=$TILE_HOME/kube.config
          aws eks update-kubeconfig --name $(self.inputs.prodClusterName) --region $AWS_REGION --role-arn $(self.inputs.prodMasterRoleARN) --kubeconfig $TILE_HOME/kube.config
          kubectl create ns go-bumblebee || true
          aws eks update-kubeconfig --name $(self.inputs.stageClusterName) --region $AWS_REGION --role-arn $(self.inputs.stageMasterRoleARN) --kubeconfig $TILE_HOME/kube.config
          kubectl create ns go-bumblebee || true
      - name: SetupDeploymentWithArgocd
        command: |
          cd $TILE_HOME/manifest/argocd
          ARGOCD_TOKEN=`curl -s -k $(self.inputs.argocdBaseUrl)/api/v1/session -d $'{"username":"$(self.inputs.argocdUser)","password":"$(self.inputs.argocdPassword)"}'|jq -r '.token'`
          githubRepo=$(echo https://$GITHUB_ACCESS_TOKEN:x-oauth-basic@github.com/$GITHUB_USER/$APP_CONF_REPO.git | sed -e "s#/#\\\/#g")

          # add staging deployment 
          sed -e 's/__github_repo__/'$githubRepo'/g' ./stage-all-in-one.json > ./stage-all-in-one-go.json
          curl -s -k $(self.inputs.argocdBaseUrl)/api/v1/applications -H "Authorization: Bearer $ARGOCD_TOKEN" -d "@stage-all-in-one-go.json"
          
          # add production deployment
          prodClusterEndpoint=$(echo -n $(self.inputs.prodClusterEndpoint) | sed -e "s#/#\\\/#g")
          sed -e 's/__server__/'$prodClusterEndpoint'/g' \
              -e 's/__github_repo__/'$githubRepo'/g' ./prod-all-in-one.json > ./prod-all-in-one-go.json
          curl -s -k $(self.inputs.argocdBaseUrl)/api/v1/applications -H "Authorization: Bearer $ARGOCD_TOKEN" -d "@prod-all-in-one-go.json"

  inputs:
    - name: githubUser
      inputType: String
      require: true
    - name: githubAccessToken
      inputType: String
      require: true
    - name: appRepo
      inputType: String
      require: true
    - name: appBranch
      inputType: String
      require: true
    - name: appConfRepo
      inputType: String
      require: true
    - name: kmsKeyID
      inputType: String
      require: true
    - name: argocdBaseUrl
      inputType: String
      require: true
    - name: argocdUser
      inputType: String
      require: true
    - name: argocdPassword
      inputType: String
      require: true
    - name: prodClusterEndpoint
      inputType: String
      require: true
    - name: prodClusterName
      inputType: String
      require: true
    - name: prodMasterRoleARN
      inputType: String
      require: true
    - name: stageClusterName
      inputType: String
      require: true
    - name: stageMasterRoleARN
      inputType: String
      require: true  
    - name: prodRedisEndpoint
      inputType: String
      require: true  


  # Ouptputs represnt output value after launched, for 'ContainerApplication' might need leverage specific command to retrive output.
  outputs:
    # FromCommand
    - name: appConfRepo
      outputType: String
      defaultValueCommand: echo https://github.com/$GITHUB_USER/$APP_CONF_REPO.git
      description: Custom::GitHub        

  notes: []

